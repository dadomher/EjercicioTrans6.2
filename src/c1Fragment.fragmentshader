#version 330 core

out vec4 color;
in vec3 vertexColor;
in vec3 Normal;

uniform vec3 viewPos;
uniform vec3 lightPos;

in vec3 FragPos;

vec3 lightColor = vec3(1.0,1.0,1.0);

void main() {

	// Ambient
    float ambientStrength = 0.05f;
    vec3 ambient = ambientStrength * lightColor;    
    
     // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // Specular
    float specularStrength = 0.25f;
    vec3 viewDir = normalize(-FragPos); // The viewer is at (0,0,0) so viewDir is (0,0,0) - Position => -Position
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor; 
    
    vec3 result = (ambient + diffuse + specular) * vertexColor;
    color = vec4(result, 1.0f);
}
